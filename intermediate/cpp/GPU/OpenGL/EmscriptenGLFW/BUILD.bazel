load("@emsdk//emscripten_toolchain:wasm_rules.bzl", "wasm_cc_binary")
load("@rules_cc//cc:defs.bzl", "cc_binary")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_push", "oci_tarball")
load("@rules_pkg//:pkg.bzl", "pkg_tar")

cc_binary(
    name = "emscripten_main",
    srcs = [
        "linmath.h",
        "main.cpp",
    ],
    defines = ["__EMSCRIPTEN__"],
    linkopts = [
        "-s USE_GLFW=3",
        #"-s USE_WEBGPU=1",
        #"-s WASM=1",
        "-s ALLOW_MEMORY_GROWTH=1",
        "-s NO_EXIT_RUNTIME=0",
        "-s ASSERTIONS=1",
    ],
    #data = ["index.html"],
    tags = ["manual"],
)

wasm_cc_binary(
    name = "emscripten_main_wasm",
    cc_target = ":emscripten_main",
)

cc_binary(
    name = "main",
    srcs = [
        "linmath.h",
        "main.cpp",
    ],
    deps = [
        "//glad",
        "@glfw",
    ] + select({
        "@platforms//os:linux": ["@system_libs//:x11"],
        "@platforms//os:windows": [],
        "@bazel_tools//src/conditions:darwin": [],
    }),
)

pkg_tar(
    name = "app",
    srcs = [":emscripten_main_wasm", "index.html"],
)

oci_image(
    name = "image",
    base = "@ubuntu",
    cmd = ["python3 -m http.server"],
    tars = ["app.tar"],
)

oci_tarball(
    name = "tarball",
    image = ":image",
    repo_tags = ["vertexwahn/emscripten_glfw:v0.0.1"],
)

pkg_tar(
    name = "tar",
    srcs = [":app2"],
)

oci_image(
    name = "image2",
    architecture = select({
        "@platforms//cpu:arm64": "arm64",
        "@platforms//cpu:x86_64": "amd64",
    }),
    base = "@distroless_base",
    tars = [":tar"],
    entrypoint = ["/app"],
    os = "linux",
)
